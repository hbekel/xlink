Usage: c64 load [--address <start>[-<end>] [--memory <mem>] <file>

Load the specified file into C64 memory.

If the filename ends with .prg, it is assumed that the file is a C64
PRG file and the first two bytes contain the C64 load address. If no
load address is specified by the user, the load address from the .prg
file is used. Otherwise the user supplied load address is used. If an
additional end address is specified, transfer will end as soon as the
end address is reached, unless the end address exceeds load address +
file size.

If a memory config is specified, it is poked to $01 prior to writing
the transfered value to C64 memory. The memory setting defaults to
0x37, which is the default setting in direct mode. If the file
overlaps the io area ($d000-$dfff) then the default memory config will
be changed to 0x33, so that data will always be loaded into the RAM
residing below the io area. This is a safety measure preventing
possible damage to either the PC's parallel port or the C64's CIA2.
In order to load data directly into the io area the memory config
needs to be set to 0x37 explicitly.

Usage: c64 save [--address <start>-<end>] [--memory <mem>] file

Save the specified C64 memory area to a file.

If the destination filename ends with .prg then the destination file
will be prefixed with the supplied start address. If no address range
is specified, then the basic program currently residing in C64 memory
will be saved.

If a memory config is specified, it will be poked to $01 prior to
reading the value to be transfered from C64 memory. The default value
is 0x37.

Usage: c64 poke [--memory <mem>] <address>,<byte>

Poke the specified byte to the specified address. 

If no memory config is specified, then the default memory config 0x37
will be used, so that values poked to the io area $d000-$dfff will
have the expected effect.

Usage: c64 peek [--memory <mem>] <address>

Read the byte at the specified C64 memory address and print it on
standard output.

If no memory config is specified, the default value 0x37 will be used.

Usage: c64 jump <address>

Jump to the specified address in C64 memory. The stack pointer,
processor flags and registers will be reset prior to jumping.

Usage: c64 run

RUN the currently loaded basic program.

Usage: c64 wait <timeout>

Try to ping the C64 server for at most <timout> milliseconds. If the
server responds within the specified timeout, then the next command on
the command line will be executed, otherwise the client will exit with
a negative exit status.

Usage: c64 reset

If a reset circuit is installed, this command will hold the PC's INIT
line low for a short period of time, which will ground the C64's RESET
line and thus perform a hardware reset.
